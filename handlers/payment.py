import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from services.marzban_service import MarzbanService
from services.payment_service import PaymentService
from aiogram import Bot
from keyboards.inline import get_payment_menu
from config import (
    MESSAGES,
    SUBSCRIPTION_PLANS,
    YOOMONEY_WALLET_ID,
    YOOMONEY_NOTIFICATION_SECRET,
    MARZBAN_BASE_URL,
    MARZBAN_USERNAME,
    MARZBAN_PASSWORD,
)

router = Router()
logger = logging.getLogger(__name__)

marzban_service = MarzbanService(MARZBAN_BASE_URL, MARZBAN_USERNAME, MARZBAN_PASSWORD)
payment_service = PaymentService(YOOMONEY_WALLET_ID, YOOMONEY_NOTIFICATION_SECRET)


@router.callback_query(F.data.startswith("plan_"))
async def process_plan_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    plan_key = callback.data.split("_", 1)[1]
    
    if plan_key not in SUBSCRIPTION_PLANS:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return
    
    plan = SUBSCRIPTION_PLANS[plan_key]
    telegram_id = callback.from_user.id
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    payment_url = payment_service.generate_payment_url(
        amount=plan["price"],
        telegram_id=telegram_id,
        plan_key=plan_key
    )
    
    text = MESSAGES["payment_info"].format(
        plan_name=plan["name"],
        price=plan["price"],
        days=plan["days"]
    )
    
    await callback.message.edit_text(
        text=text,
        reply_markup=get_payment_menu(payment_url)
    )
    await callback.answer()


# –£–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã ‚Äî —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤–µ–±—Ö—É–∫–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏


# Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç YooMoney (–æ—Ç–¥–µ–ª—å–Ω—ã–π endpoint)
async def process_payment_notification(data: dict, bot: Bot | None = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ"""
    if not payment_service.verify_notification(data):
        return False
    
    payment_data = payment_service.parse_payment_data(data.get("label", ""))
    if not payment_data:
        return False
    
    telegram_id = payment_data["telegram_id"]
    plan_key = payment_data["plan_key"]
    
    if plan_key not in SUBSCRIPTION_PLANS:
        return False
    
    plan = SUBSCRIPTION_PLANS[plan_key]
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_info = await marzban_service.get_user_info(telegram_id)
        
        if user_info:
            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            result = await marzban_service.extend_subscription(telegram_id, plan)
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await marzban_service.create_user(telegram_id, plan)
        
        logger.info("Payment processed for user %s, until %s", telegram_id, result.get("expire"))

        # Notify user if bot instance provided
        if bot is not None:
            try:
                expire_ts = result.get("expire")
                expire_str = "‚Äî"
                try:
                    from utils.helpers import format_ts_to_str
                    if expire_ts:
                        expire_str = format_ts_to_str(expire_ts)
                except Exception:
                    pass

                status_line = "üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>" 
                text = (
                    "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞</b>\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"{status_line}\n"
                    f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{expire_str}</b>\n\n"
                    "–û—Ç–∫—Ä–æ–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞\" –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É."
                )
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìä –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="my_subscription")]
                ])
                await bot.send_message(chat_id=telegram_id, text=text, reply_markup=keyboard)
            except Exception as notify_err:
                logger.error("Failed to notify user %s: %s", telegram_id, notify_err)
        return True
    except Exception as e:
        logger.error(f"Failed to process payment for user {telegram_id}: {e}")
        return False


