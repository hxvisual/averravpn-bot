from aiogram import Router, F
from aiogram.types import CallbackQuery
from services.marzban_service import MarzbanService
from keyboards.inline import get_subscription_menu, get_plans_menu
from config import MESSAGES, MARZBAN_BASE_URL, MARZBAN_USERNAME, MARZBAN_PASSWORD
from utils.helpers import (
    is_subscription_active,
    bytes_to_gigabytes,
    get_display_username,
    format_ts_to_str,
)

router = Router()
marzban_service = MarzbanService(MARZBAN_BASE_URL, MARZBAN_USERNAME, MARZBAN_PASSWORD)


@router.callback_query(F.data == "my_subscription")
async def my_subscription_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    telegram_id = callback.from_user.id
    user_info = await marzban_service.get_user_info(telegram_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    is_active = is_subscription_active(user_info)

    if not user_info or not is_active:
        # –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç—Ä–∞–∫—Ç—É–µ–º –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–π/–∏—Å—Ç—ë–∫—à–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏)
        await callback.message.edit_text(
            text=MESSAGES["no_subscription"],
            reply_markup=get_plans_menu()
        )
    else:
        # –ï—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞
        expire_date = format_ts_to_str(int(user_info.get("expire", 0) or 0))
        used_gb = bytes_to_gigabytes(user_info.get("used_traffic", 0))
        total_gb = "‚àû" if not user_info.get("data_limit") else f"{bytes_to_gigabytes(user_info['data_limit'])} –ì–ë"
        display_username = get_display_username(user_info.get("username"))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è
        if is_active:
            action_text = "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\" –Ω–∏–∂–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ —à–∞–≥–∞–º."
        else:
            action_text = "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–æ–π (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞)
        link_block = ""
        if is_active and user_info.get("subscription_url"):
            link_block = (
                "\n\nüîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\n"
                f"<code>{user_info['subscription_url']}</code>"
            )

        text = (
            "üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{display_username}</b>\n"
            f"‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç: <b>{expire_date}</b>\n"
            f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{used_gb} –ì–ë</b> / <b>{total_gb}</b>"
            f"{link_block}\n\n"
            f"{action_text}"
        )
        
        await callback.message.edit_text(
            text=text,
            reply_markup=get_subscription_menu(has_subscription=True)
        )
    
    await callback.answer()


@router.callback_query(F.data.in_(["buy_subscription", "extend_subscription"]))
async def show_plans(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã"""
    await callback.message.edit_text(
        text=(
            "üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚úÖ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
            "‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n"
            "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n"
            "üåç <b>–°—Ç—Ä–∞–Ω—ã –≤ –ø–æ–¥–ø–∏—Å–∫–µ</b>: \nüá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è (‚úîÔ∏èTikTok)\nüá∑üá∫ –†–æ—Å—Å–∏—è (‚úîÔ∏è–ì–ª—É—à–∏–ª–∫–∏, ‚úîÔ∏èYoutube)"
        ),
        reply_markup=get_plans_menu()
    )
    await callback.answer()


# –†—É—á–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ ‚Äî —Å—Å—ã–ª–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä—è–º–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ


